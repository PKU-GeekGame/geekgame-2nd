起初一头雾水，毕竟只用一种汇编指令不可能完成这个任务。
尽管调用者binary已经包含了fopen, fread和printf这些函数的入口，但我的汇编至少需要mov（准备函数参数），call（调用函数），ret（从自己的代码返回main，不ret或者pop会导致栈不平衡），以及需要找一个buffer存放字符串入参和出参。
在仔细阅读题目源码后突然发现，汇编代码是用python静态分析的，而mmap的页具有R/W/EX的完整权限。换言之，可以在runtime修改机器码。
于是问题迎刃而解，除了mov以外的指令可以全部存储在mov指令的立即数中，然后在静态代码中放一些垃圾指令，在runtime先用mov指令，以立即数覆盖那些垃圾指令，就可以用上各种各样的指令了。buffer也是同理，可以直接利用开头已经被执行过的机器码的内存空间。
汇编源码参见a.asm，可以用NASM得到elf64，再找个16位编辑器截出.text段，就得到了a.bin。
附件base64en.py用于对a.bin作base64编码。